{"version":3,"sources":["components/Form.js","components/Forecast.js","App.js","index.js"],"names":["Form","zipCode","handleSubmit","handleChange","onSubmit","style","marginTop","borderRadius","required","placeholder","name","value","onChange","marginLeft","backgroundColor","type","config","apiUrl","Forecast","props","event","persist","setState","target","preventDefault","axios","get","state","then","res","city","data","description","list","weather","temperature","main","temp","feelsLike","feels_like","humidity","wind","speed","condition","catch","error","window","alert","reset","forecastDisplay","this","className","Card","Math","floor","Component","App","path","component","appJsx","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21539942.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = ({ zipCode, handleSubmit, handleChange }) => (\n  <form onSubmit={handleSubmit}>\n    <input style={{ marginTop: \"15px\", borderRadius: \"5px\" }}\n      required\n      placeholder=\"Enter Zipcode\"\n      name=\"zipCode\"\n      value={zipCode}\n      onChange={handleChange}\n    />\n    <button style={{ marginLeft: \"15px\", borderRadius: \"5px\", backgroundColor: \"#66ff00\" }} type=\"submit\">Search</button>\n  </form>\n);\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Form from \"./Form\";\nimport Card from \"react-bootstrap/Card\";\n\n// Open Weather API Call\nconst apiKey = \"ee272a441023608a6dff62d428450270\";\nconst config = {\n  apiUrl: `https://api.openweathermap.org/data/2.5/forecast?units=imperial&us&appid=${apiKey}&zip=`,\n};\n\nclass Forecast extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      zipCode: \"\",\n      city: \"\",\n      description: \"\",\n      temperature: \"\",\n      feelsLike: \"\",\n      humidity: \"\",\n      wind: \"\",\n      condition: \"\",\n    };\n  }\n\n  handleChange = (event) => {\n    event.persist();\n    this.setState({ zipCode: event.target.value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    axios\n      .get(`${config.apiUrl}${this.state.zipCode}`)\n      .then((res) =>\n        this.setState({\n          city: res.data.city.name,\n          description: res.data.list[0].weather[0].description,\n          temperature: res.data.list[0].main.temp,\n          feelsLike: res.data.list[0].main.feels_like,\n          humidity: res.data.list[0].main.humidity,\n          wind: res.data.list[0].wind.speed,\n          condition: res.data.list[0].weather[0].main,\n        })\n      )\n      .catch((error) => {\n        window.alert(\"Uh oh! Something Went Wrong!\");\n      });\n    event.target.reset();\n  };\n\n  render() {\n    let forecastDisplay;\n    const {\n      city,\n      description,\n      temperature,\n      feelsLike,\n      humidity,\n      wind,\n      condition,\n    } = this.state;\n\n    if (!city) {\n      forecastDisplay = \"\";\n    } else if (condition === \"Clear\") {\n      forecastDisplay = (\n        <div className=\"forecast\">\n          <Card className=\"clear\">\n            <h1>Current Forecast For: {city}</h1>\n            <h1>Current Conditon: {description}</h1>\n            <h1>Current Temp: {Math.floor(temperature)}°F</h1>\n            <h1>Feels Like: {Math.floor(feelsLike)}°F</h1>\n            <h1>Humidity: {humidity}%</h1>\n            <h1>Wind: {Math.floor(wind)} mph</h1>\n          </Card>\n        </div>\n      );\n    } else if (condition === \"Clouds\") {\n      forecastDisplay = (\n        <div className=\"forecast\">\n          <Card className=\"clouds\">\n            <h1>Current Forecast For: {city}</h1>\n            <h1>Current Conditon: {description}</h1>\n            <h1>Current Temp: {Math.floor(temperature)}°F</h1>\n            <h1>Feels Like: {Math.floor(feelsLike)}°F</h1>\n            <h1>Humidity: {humidity}%</h1>\n            <h1>Wind: {Math.floor(wind)} mph</h1>\n          </Card>\n        </div>\n      );\n    } else if (condition === \"Rain\" || \"Drizzle\") {\n      forecastDisplay = (\n        <div className=\"forecast\">\n          <Card className=\"rain\">\n            <h1>Current Forecast For: {city}</h1>\n            <h1>Current Conditon: {description}</h1>\n            <h1>Current Temp: {Math.floor(temperature)}°F</h1>\n            <h1>Feels Like: {Math.floor(feelsLike)}°F</h1>\n            <h1>Humidity: {humidity}%</h1>\n            <h1>Wind: {Math.floor(wind)} mph</h1>\n          </Card>\n        </div>\n      );\n    } else if (condition === \"Snow\") {\n      forecastDisplay = (\n        <div className=\"forecast\">\n          <Card className=\"snow\">\n            <h1>Current Forecast For: {city}</h1>\n            <h1>Current Conditon: {description}</h1>\n            <h1>Current Temp: {Math.floor(temperature)}°F</h1>\n            <h1>Feels Like: {Math.floor(feelsLike)}°F</h1>\n            <h1>Humidity: {humidity}%</h1>\n            <h1>Wind: {Math.floor(wind)} mph</h1>\n          </Card>\n        </div>\n      );\n    } else if (condition === \"Thunderstorm\") {\n      forecastDisplay = (\n        <div className=\"forecast\">\n          <Card className=\"thunderstorm\">\n            <h1>Current Forecast For: {city}</h1>\n            <h1>Current Conditon: {description}</h1>\n            <h1>Current Temp: {Math.floor(temperature)}°F</h1>\n            <h1>Feels Like: {Math.floor(feelsLike)}°F</h1>\n            <h1>Humidity: {humidity}%</h1>\n            <h1>Wind: {Math.floor(wind)} mph</h1>\n          </Card>\n        </div>\n      );\n    } else {\n      forecastDisplay = (\n        <div className=\"forecast\">\n          <Card className=\"default\">\n            <h1>Current Forecast For: {city}</h1>\n            <h1>Current Conditon: {description}</h1>\n            <h1>Current Temp: {Math.floor(temperature)}°F</h1>\n            <h1>Feels Like: {Math.floor(feelsLike)}°F</h1>\n            <h1>Humidity: {humidity}%</h1>\n            <h1>Wind: {Math.floor(wind)} mph</h1>\n          </Card>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"heading\" style={{ marginTop: \"80px\" }}>\n        <h1>Weather Forecaster!</h1>\n        <h4>Enter A Zip Code Below To See The Current Tempurature</h4>\n        <Form\n          temperature={temperature}\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n        />\n        {forecastDisplay}\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Forecast from \"./components/Forecast\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Route path=\"/\" component={Forecast} />\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\n\nconst appJsx = (\n  <HashRouter>\n    <App />\n  </HashRouter>\n);\n\nReactDOM.render(appJsx, document.getElementById(\"root\"));\n"],"sourceRoot":""}